{"remainingRequest":"/home/lorem/Рабочий стол/giglevichPROGECT/app/spa/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lorem/Рабочий стол/giglevichPROGECT/app/spa/src/components/map/map__render.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lorem/Рабочий стол/giglevichPROGECT/app/spa/src/components/map/map__render.vue","mtime":1567524058000},{"path":"/home/lorem/Рабочий стол/giglevichPROGECT/app/spa/node_modules/cache-loader/dist/cjs.js","mtime":1567524055000},{"path":"/home/lorem/Рабочий стол/giglevichPROGECT/app/spa/node_modules/babel-loader/lib/index.js","mtime":1567524055000},{"path":"/home/lorem/Рабочий стол/giglevichPROGECT/app/spa/node_modules/cache-loader/dist/cjs.js","mtime":1567524055000},{"path":"/home/lorem/Рабочий стол/giglevichPROGECT/app/spa/node_modules/vue-loader/lib/index.js","mtime":1567524057000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Konva from 'konva' \nimport axios from 'axios'\nimport store from '../../store.js'\n\nimport card from '../card/card.vue'\nimport big_image from '../big-image/big-image.vue'\n\nexport default {\n    components: {\n        'card': card,\n        'big-image': big_image\n    },\n    computed: {\n        render_card: function() { return this.$store.state.render_card},\n        render_image: function() {return this.$store.state.render_image}\n    },\n    data: () => {\n        return{\n            rendering: {\n                header: null,\n                district: null,\n                status:null,\n                adress: null,\n                photo: null\n            },\n            position: {\n                x: null,\n                y: null\n            },\n        }\n    },\n    methods: {\n        renderCard: function(event){\n            this.rendering.header = event.target.header\n            this.rendering.district = event.target.district;\n            this.rendering.status = event.target.status;\n            this.rendering.adress = event.target.adress;\n            this.rendering.photo = event.target.photo;\n            this.position.x = Math.round(event.target.X);\n            this.position.y = Math.round(event.target.Y);\n            if (this.render_card != true) {\n                store.commit('card')\n            }\n        }\n    },\n    mounted() {\n        var renderCard = this.renderCard\n\n        var width_of_map = window.innerWidth\n        var height_of_map = Math.round(650*width_of_map/536)\n\n        var map_image = new Image();\n        map_image.src = './map.jpg';\n        var map_background = new Konva.Image({\n            image: map_image,\n            width: width_of_map,\n            height: height_of_map,\n            x: 0,\n            y: 0\n        })\n\n        var canvas = new Konva.Stage({\n            width: width_of_map,\n            height: height_of_map,\n            container: 'container'\n        })\n        canvas.container().style.position = 'static'\n\n        var canvas_layer = new Konva.Layer();\n        canvas.add(canvas_layer)\n\n        var map_objects = new Konva.Group({\n            width: width_of_map,\n            height: height_of_map\n        })\n\n        axios.get('./objects_list.json').then(response => {\n            parse_objects_list(response.data)})\n\n        function parse_objects_list(objects_list) {\n\n            map_objects.add(map_background);\n            canvas_layer.batchDraw();\n\n            var points_list = [];\n\n            for(var i = 0; i < objects_list.length; i++){\n            points_list[i] = new Konva.Circle({\n                radius: 8 *  width_of_map / 536,\n                fill: 'white',\n                stroke: 'darkgray',\n                strokeWidth: 2 *  width_of_map / 536,\n                x: objects_list[i].x * width_of_map / 536,\n                y: objects_list[i].y * height_of_map / 650,\n                opacity: 0.5\n            });\n\n            map_objects.add(points_list[i]);\n\n            points_list[i].header = objects_list[i].header;\n            points_list[i].district = objects_list[i].district;\n            points_list[i].status = objects_list[i].status;\n            points_list[i].adress = objects_list[i].adress;\n            points_list[i].photo = objects_list[i].photo;\n\n            points_list[i].X = objects_list[i].x * width_of_map / 536;\n            points_list[i].Y = objects_list[i].y * height_of_map / 650;\n\n            points_list[i].on('click', renderCard);\n            points_list[i].on('mouseenter', function(){\n                canvas.container().style.cursor = 'pointer';\n            })\n            points_list[i].on('mouseleave', function(){\n                canvas.container().style.cursor = 'default';\n            })\n\n            points_list[i].zIndex(i+1);\n            }\n            canvas_layer.add(map_objects)\n            }\n        }\n\n    }\n",{"version":3,"sources":["map__render.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"map__render.vue","sourceRoot":"src/components/map","sourcesContent":["<template>\n    <section id=\"root\">\n        <card v-if=\"render_card\" \n        v-bind:rendering=\"rendering\" \n        v-bind:position=\"position\"\n        v-bind:card=\"render_card\">\n        </card>\n        <big-image v-if=\"render_image\" v-bind:photo=\"rendering.photo\"></big-image>\n        <div id=\"container\"></div>\n    </section>\n</template>\n\n<style lang=\"sass\" scoped>\n    #root\n        position: relative\n</style>\n\n<script>\nimport Konva from 'konva' \nimport axios from 'axios'\nimport store from '../../store.js'\n\nimport card from '../card/card.vue'\nimport big_image from '../big-image/big-image.vue'\n\nexport default {\n    components: {\n        'card': card,\n        'big-image': big_image\n    },\n    computed: {\n        render_card: function() { return this.$store.state.render_card},\n        render_image: function() {return this.$store.state.render_image}\n    },\n    data: () => {\n        return{\n            rendering: {\n                header: null,\n                district: null,\n                status:null,\n                adress: null,\n                photo: null\n            },\n            position: {\n                x: null,\n                y: null\n            },\n        }\n    },\n    methods: {\n        renderCard: function(event){\n            this.rendering.header = event.target.header\n            this.rendering.district = event.target.district;\n            this.rendering.status = event.target.status;\n            this.rendering.adress = event.target.adress;\n            this.rendering.photo = event.target.photo;\n            this.position.x = Math.round(event.target.X);\n            this.position.y = Math.round(event.target.Y);\n            if (this.render_card != true) {\n                store.commit('card')\n            }\n        }\n    },\n    mounted() {\n        var renderCard = this.renderCard\n\n        var width_of_map = window.innerWidth\n        var height_of_map = Math.round(650*width_of_map/536)\n\n        var map_image = new Image();\n        map_image.src = './map.jpg';\n        var map_background = new Konva.Image({\n            image: map_image,\n            width: width_of_map,\n            height: height_of_map,\n            x: 0,\n            y: 0\n        })\n\n        var canvas = new Konva.Stage({\n            width: width_of_map,\n            height: height_of_map,\n            container: 'container'\n        })\n        canvas.container().style.position = 'static'\n\n        var canvas_layer = new Konva.Layer();\n        canvas.add(canvas_layer)\n\n        var map_objects = new Konva.Group({\n            width: width_of_map,\n            height: height_of_map\n        })\n\n        axios.get('./objects_list.json').then(response => {\n            parse_objects_list(response.data)})\n\n        function parse_objects_list(objects_list) {\n\n            map_objects.add(map_background);\n            canvas_layer.batchDraw();\n\n            var points_list = [];\n\n            for(var i = 0; i < objects_list.length; i++){\n            points_list[i] = new Konva.Circle({\n                radius: 8 *  width_of_map / 536,\n                fill: 'white',\n                stroke: 'darkgray',\n                strokeWidth: 2 *  width_of_map / 536,\n                x: objects_list[i].x * width_of_map / 536,\n                y: objects_list[i].y * height_of_map / 650,\n                opacity: 0.5\n            });\n\n            map_objects.add(points_list[i]);\n\n            points_list[i].header = objects_list[i].header;\n            points_list[i].district = objects_list[i].district;\n            points_list[i].status = objects_list[i].status;\n            points_list[i].adress = objects_list[i].adress;\n            points_list[i].photo = objects_list[i].photo;\n\n            points_list[i].X = objects_list[i].x * width_of_map / 536;\n            points_list[i].Y = objects_list[i].y * height_of_map / 650;\n\n            points_list[i].on('click', renderCard);\n            points_list[i].on('mouseenter', function(){\n                canvas.container().style.cursor = 'pointer';\n            })\n            points_list[i].on('mouseleave', function(){\n                canvas.container().style.cursor = 'default';\n            })\n\n            points_list[i].zIndex(i+1);\n            }\n            canvas_layer.add(map_objects)\n            }\n        }\n\n    }\n</script>"]}]}